// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joeyscat/object-storage-go/internal/api_server/service/v1 (interfaces: Service,BucketSrv,ObjectSrv)

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/joeyscat/object-storage-go/internal/api_server/model/v1"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Buckets mocks base method.
func (m *MockService) Buckets() BucketSrv {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buckets")
	ret0, _ := ret[0].(BucketSrv)
	return ret0
}

// Buckets indicates an expected call of Buckets.
func (mr *MockServiceMockRecorder) Buckets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buckets", reflect.TypeOf((*MockService)(nil).Buckets))
}

// Objects mocks base method.
func (m *MockService) Objects() ObjectSrv {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Objects")
	ret0, _ := ret[0].(ObjectSrv)
	return ret0
}

// Objects indicates an expected call of Objects.
func (mr *MockServiceMockRecorder) Objects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Objects", reflect.TypeOf((*MockService)(nil).Objects))
}

// MockBucketSrv is a mock of BucketSrv interface.
type MockBucketSrv struct {
	ctrl     *gomock.Controller
	recorder *MockBucketSrvMockRecorder
}

// MockBucketSrvMockRecorder is the mock recorder for MockBucketSrv.
type MockBucketSrvMockRecorder struct {
	mock *MockBucketSrv
}

// NewMockBucketSrv creates a new mock instance.
func NewMockBucketSrv(ctrl *gomock.Controller) *MockBucketSrv {
	mock := &MockBucketSrv{ctrl: ctrl}
	mock.recorder = &MockBucketSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketSrv) EXPECT() *MockBucketSrvMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBucketSrv) Create(arg0 context.Context, arg1 *v1.Bucket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBucketSrvMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBucketSrv)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockBucketSrv) Delete(arg0 context.Context, arg1 string, arg2 v1.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBucketSrvMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBucketSrv)(nil).Delete), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockBucketSrv) List(arg0 context.Context, arg1 v1.UserID) ([]*v1.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*v1.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBucketSrvMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBucketSrv)(nil).List), arg0, arg1)
}

// MockObjectSrv is a mock of ObjectSrv interface.
type MockObjectSrv struct {
	ctrl     *gomock.Controller
	recorder *MockObjectSrvMockRecorder
}

// MockObjectSrvMockRecorder is the mock recorder for MockObjectSrv.
type MockObjectSrvMockRecorder struct {
	mock *MockObjectSrv
}

// NewMockObjectSrv creates a new mock instance.
func NewMockObjectSrv(ctrl *gomock.Controller) *MockObjectSrv {
	mock := &MockObjectSrv{ctrl: ctrl}
	mock.recorder = &MockObjectSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectSrv) EXPECT() *MockObjectSrvMockRecorder {
	return m.recorder
}
