// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joeyscat/object-storage-go/internal/api_server/store (interfaces: Factory,BucketStore,ObjectStore)

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/joeyscat/object-storage-go/internal/api_server/model/v1"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Buckets mocks base method.
func (m *MockFactory) Buckets() BucketStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buckets")
	ret0, _ := ret[0].(BucketStore)
	return ret0
}

// Buckets indicates an expected call of Buckets.
func (mr *MockFactoryMockRecorder) Buckets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buckets", reflect.TypeOf((*MockFactory)(nil).Buckets))
}

// Close mocks base method.
func (m *MockFactory) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFactoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFactory)(nil).Close))
}

// Objects mocks base method.
func (m *MockFactory) Objects() ObjectStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Objects")
	ret0, _ := ret[0].(ObjectStore)
	return ret0
}

// Objects indicates an expected call of Objects.
func (mr *MockFactoryMockRecorder) Objects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Objects", reflect.TypeOf((*MockFactory)(nil).Objects))
}

// MockBucketStore is a mock of BucketStore interface.
type MockBucketStore struct {
	ctrl     *gomock.Controller
	recorder *MockBucketStoreMockRecorder
}

// MockBucketStoreMockRecorder is the mock recorder for MockBucketStore.
type MockBucketStoreMockRecorder struct {
	mock *MockBucketStore
}

// NewMockBucketStore creates a new mock instance.
func NewMockBucketStore(ctrl *gomock.Controller) *MockBucketStore {
	mock := &MockBucketStore{ctrl: ctrl}
	mock.recorder = &MockBucketStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketStore) EXPECT() *MockBucketStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBucketStore) Create(arg0 context.Context, arg1 *v1.Bucket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBucketStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBucketStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockBucketStore) Delete(arg0 context.Context, arg1 string, arg2 v1.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBucketStoreMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBucketStore)(nil).Delete), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockBucketStore) List(arg0 context.Context, arg1 v1.UserID) ([]*v1.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*v1.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBucketStoreMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBucketStore)(nil).List), arg0, arg1)
}

// MockObjectStore is a mock of ObjectStore interface.
type MockObjectStore struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreMockRecorder
}

// MockObjectStoreMockRecorder is the mock recorder for MockObjectStore.
type MockObjectStoreMockRecorder struct {
	mock *MockObjectStore
}

// NewMockObjectStore creates a new mock instance.
func NewMockObjectStore(ctrl *gomock.Controller) *MockObjectStore {
	mock := &MockObjectStore{ctrl: ctrl}
	mock.recorder = &MockObjectStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStore) EXPECT() *MockObjectStoreMockRecorder {
	return m.recorder
}
